// Code generated by go generate; DO NOT EDIT!

package registry

import (
	"github.com/a-peyrard/godi"
	"github.com/a-peyrard/godi/config"
	"github.com/test/complex/decorators"
	"github.com/test/complex/providers"
	cconfig "github.com/test/complex/config"
)

func (Registry) Register(resolver *godi.Resolver) {
	resolver.MustRegister(
		providers.NewAppService,
		godi.Named("app.service"),
		godi.Priority(10),
		godi.Description("AppService is the main application service"),
		godi.Dependencies(
			godi.Inject.Named("AppConfig"),
			godi.Inject.Named("cache"),
			godi.Inject.Multiple(),
		),
	)
	resolver.MustRegister(
		providers.NewRedisCache,
		godi.Named("cache"),
		godi.When("REDIS_ENABLED").Equals("true"),
		godi.Description("RedisCache for production"),
		godi.Dependencies(
			godi.Inject.Named("AppConfig"),
		),
	)
	resolver.MustRegister(
		providers.NewMemCache,
		godi.Named("cache"),
		godi.Description("MemCache for development"),
	)
	resolver.MustRegister(
		providers.NewFirstRunner,
		godi.Named("runner"),
		godi.Description("FirstRunner implementation"),
	)
	resolver.MustRegister(
		providers.NewSecondRunner,
		godi.Named("runner"),
		godi.Priority(10),
		godi.Description("SecondRunner implementation"),
	)
	resolver.MustRegister(
		godi.ToStaticProvider("APP"),
		godi.Named("EnvPrefix4AppConfig"),
		godi.Description("Provides configuration prefix, i.e. the env vars prefix"),
	)
	resolver.MustRegister(
		func(envPrefix string) (*cconfig.AppConfig, error) {
			return config.Load[cconfig.AppConfig](config.WithEnvPrefix(envPrefix))
		},
		godi.Named("AppConfig"),
		godi.Description("contains all application settings"),
		godi.Dependencies(
			godi.Inject.Named("EnvPrefix4AppConfig"),
		),
	)
	resolver.MustRegister(&godi.ConfigFieldProvider[cconfig.AppConfig]{})
	resolver.MustRegister(
		decorators.AddMetrics,
		godi.Decorate("app.service"),
		godi.Priority(100),
		godi.Description("MetricsDecorator adds metrics to the app service"),
		godi.Dependencies(
			godi.Inject.Named("metrics").Optional(),
		),
	)
}
